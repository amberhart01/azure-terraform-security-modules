name: terraform-ci

on:
  pull_request:
  push:
    branches: [ main ]

env:
  TF_IN_AUTOMATION: "true"
  ARM_USE_OIDC: "true"
  ARM_SKIP_PROVIDER_REGISTRATION: "true"

jobs:
  fmt_validate_tflint:
    name: Terraform fmt + validate + tflint (modules)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Setup tflint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.53.0

      - name: Check formatting (repo-wide)
        run: terraform fmt -check -recursive

      - name: Validate & TFLint modules
        shell: bash
        run: |
          set -euo pipefail
          for d in modules/*; do
            echo "::group::Init & Validate $d"
            (cd "$d" && terraform init -backend=false -input=false && terraform validate)
            echo "::endgroup::"

            echo "::group::TFLint $d"
            (cd "$d" && tflint --init && tflint --recursive)
            echo "::endgroup::"
          done

  security_scans:
    name: Security scans (checkov + tfsec)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          framework: terraform
          quiet: true
          soft_fail: false

      - name: tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: .

  plan_example:
    name: Terraform plan (example) â€” conditional by secrets
    runs-on: ubuntu-latest
    needs: [fmt_validate_tflint, security_scans]

    # Map secrets to env; step-level ifâ€™s can read env.*
    env:
      ARM_CLIENT_ID:       ${{ secrets.AZURE_CLIENT_ID || '' }}
      ARM_TENANT_ID:       ${{ secrets.AZURE_TENANT_ID || '' }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID || '' }}

    steps:
      - uses: actions/checkout@v4

      - name: Skipping plan (missing Azure creds)
        if: ${{ env.ARM_CLIENT_ID == '' || env.ARM_TENANT_ID == '' || env.ARM_SUBSCRIPTION_ID == '' }}
        run: |
          echo "Skipping terraform plan because one or more Azure secrets are missing."
          echo "Required: AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_SUBSCRIPTION_ID"

      - name: Setup Terraform
        if: ${{ env.ARM_CLIENT_ID != '' && env.ARM_TENANT_ID != '' && env.ARM_SUBSCRIPTION_ID != '' }}
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      # Optional OIDC login (uncomment once your federated credential is configured)
      # - name: Azure login (OIDC)
      #   if: ${{ env.ARM_CLIENT_ID != '' && env.ARM_TENANT_ID != '' && env.ARM_SUBSCRIPTION_ID != '' }}
      #   uses: azure/login@v2
      #   with:
      #     client-id:       ${{ env.ARM_CLIENT_ID }}
      #     tenant-id:       ${{ env.ARM_TENANT_ID }}
      #     subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Init/Plan example (no state backend)
        if: ${{ env.ARM_CLIENT_ID != '' && env.ARM_TENANT_ID != '' && env.ARM_SUBSCRIPTION_ID != '' }}
        working-directory: examples/rg_kv_sa_demo
        run: |
          terraform init -backend=false -input=false
          terraform validate
          terraform plan -input=false -lock=false -out=tfplan

      - name: Upload plan artifact
        if: ${{ env.ARM_CLIENT_ID != '' && env.ARM_TENANT_ID != '' && env.ARM_SUBSCRIPTION_ID != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: examples/rg_kv_sa_demo/tfplan

  terratest_placeholder:
    name: Terratest (placeholder)
    runs-on: ubuntu-latest
    needs: [fmt_validate_tflint, security_scans]
    steps:
      - uses: actions/checkout@v4
      - name: Placeholder â€” Terratest
        run: |
          echo "ðŸ”§ TODO: Add Go-based Terratest suite here."
          echo "Suggested structure:"
          echo "./test/aks_secure_baseline_test.go"
          echo "./test/storage_account_secure_test.go"
          echo "./test/key_vault_secure_test.go"
          echo "Future command: go test -v ./test -timeout 45m"
